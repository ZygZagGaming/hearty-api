plugins {
    id "java-library"
    id "eclipse"
    id "idea"
    id "maven-publish"
    alias libs.plugins.ng.userdev
}

version = System.getenv("VERSION") ?: mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { url = "https://maven.shedaniel.me" }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release.set(JavaLanguageVersion.of(17).asInt())
}

base {
    archivesName = "hearty-$minecraft_version-api"
}

tasks.named("jar", Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
//                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLModType": "GAMELIBRARY",
                "Automatic-Module-Name": "heartyapi"
        ])
    }

    //finalizedBy "reobfJar"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.

//minecraft.accessTransformers.file rootProject.file("src/main/resources/META-INF/accesstransformer.cfg")
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    configureEach {
        systemProperty "forge.logging.markers", "REGISTRIES"
        systemProperty "forge.logging.console.level", "debug"

        modSource project.sourceSets.main
    }

    client {
        workingDirectory project.file("run/client/Dev")
    }

    client_1 {
        configure "client"
        workingDirectory project.file("run/client/Player1")
        programArguments.addAll "--username", "Player1"
    }

    client_2 {
        configure "client"
        workingDirectory project.file("run/client/Player2")
        programArguments.addAll "--username", "Player2"
    }

    server {
        systemProperty "forge.enabledGameTestNamespaces", project.mod_id
        workingDirectory project.file("run/server")
        programArgument "--nogui"
    }

    data {
        programArguments.addAll "--mod", project.mod_id, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources/").getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir "src/generated/resources" }


dependencies {
    implementation libs.neo
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
    withJavadocJar()
}

minecraft {
    //modIdentifier = mod_id
    mappings {
        channel = official()
        version.put "minecraft", minecraft_version
    }

    accessTransformers.file "src/main/resources/META-INF/accesstransformer.cfg"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(["META-INF/mods.toml"]) {
        expand replaceProperties + [project: project]
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        gpr(MavenPublication) {
            artifactId = "hearty-$minecraft_version-api"

            artifact tasks.jar
//            artifact tasks.sourcesJar
//            artifact tasks.javadocJar

            version = System.getenv("VERSION") ?: mod_version

            pom {
                name = "hearty-api"
                description = "API for the Minecraft mod Hearty"
                url = "http://github.com/ZygZagGaming/hearty-api"

                licenses {
                    license {
                        name = "The MIT License"
                        url = "https://opensource.org/license/mit/"
                    }
                }

                developers {
                    developer {
                        id = "zygzaggaming"
                        name = "Alex Finn"
                        email = "zygzaggaming@gmail.com"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/ZygZagGaming/hearty-api.git"
                    developerConnection = "scm:git:ssh://github.com:ZygZagGaming/hearty-api.git"
                    url = "http://github.com/ZygZagGaming/"
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/zygzaggaming/hearty-api")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
//            url = file("repo")
        }
    }
}

//artifacts {
//    archives tasks.jar
//    archives tasks.sourcesJar
//}